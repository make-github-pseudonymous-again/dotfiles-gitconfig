[alias]

	# Log graph
	lg = log --graph

	# List oneline commits showing commit relative datetime and author name
	l1 = lg --pretty=format:"%C(auto)%h%d%Creset\\ %s\\ %C(magenta)(%cd)\\ %C(bold\\ blue)<%an>%Creset" --date=relative

	# Same but with emojified output
	l = ! git l1 --color | emojify | less --tabs=4 -RFX

	# List ALL oneline commits showing commit relative datetime and author name
	la = ! git l1 --all --color | emojify | less --tabs=4 -RFX

	# List commits showing changed files
	lf = ! git l1 --numstat --color | emojify | less --tabs=4 -RFX

	# List oneline commits showing commit relative datetime and commiter name
	lc = lg --pretty=format:"%C(auto)%h%d%Creset\\ %s\\ %C(magenta)(%cd)\\ %C(bold\\ blue)<%cn>%Creset" --date=relative

	# List oneline commits showing author relative datetime and author name
	ld = lg --pretty=format:"%C(auto)%h%d%Creset\\ %s\\ %C(magenta)(%ad)\\ %C(bold\\ blue)<%an>%Creset" --date=relative

	# List oneline commits showing author date and author name
	lds = lg --pretty=format:"%C(auto)%h%d%Creset\\ %s\\ %C(magenta)(%ad)\\ %C(bold\\ blue)<%an>%Creset" --date=short

	# List commits for piping
	lp = log --pretty=format:"%h\\ %s\\ <%cn>"


	# Print all commits since last tag
	release = ! git log --pretty=oneline --abbrev-commit "HEAD...$({ git rev-list --max-parents=0 HEAD ; git tag -l ; } | tail -n1)"

	# View the current working tree status using the short format
	s = status -s

	# Status
	st = status

	# Diff line-wise
	d = diff

	# Diff with origin line-wise
	do = ! git diff "origin/$(git branch --show-current)"

	# Diff staged line-wise
	ds = diff --staged

	# Diff staged with origin line-wise
	dos = do --staged

	# Diff word-wise
	dw = diff --color-words

	# Diff with origin word-wise
	dow = do --color-words

	# Diff staged word-wise
	dws = diff --color-words --staged

	# Diff staged with originword-wise
	dows = do --color-words --staged

	# Diff character-wise
	dt = diff --word-diff-regex=.

	# Diff with origin character-wise
	dot = do --word-diff-regex=.

	# Diff staged character-wise
	dts = diff --word-diff-regex=. --staged

	# Diff staged with origin character-wise
	dots = do --word-diff-regex=. --staged

	# Show the diff between the latest commit and the current state
	dp = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Diff graph
	dst = diff --stat

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin main"

	# Clone a repository including all submodules
	cl = clone --recursive

	# Add files or changes
	a = add

	# Add hunks interactively
	ai = add -i

	# Add hunks interactively but go directly to the patch step
	ap = add -p

	# Add hunks interactively but go directly to the patch step (only for files already staged)
	aps = "! git status -z | grep -z '^[MAD]' | sed -z 's/^...//g' | xargs -0 --open-tty --no-run-if-empty git add --patch --"

	# Commit
	c = ! GIT_EDITOR=\"vim +startinsert\" git commit --verbose
	j = ! GIT_EDITOR=\"vim +startinsert!\" git commit --message H --edit --verbose
	k = ! GIT_EDITOR=\"vim +startinsert!\" git commit --message B --edit --verbose

	# Add all untracked files and unstaged changes
	aa = add -A

	# Commit all changes
	ca = commit --all --verbose

	# Add all untracked files and unstaged changes and commit all changes
	aaca = !git add -A && git commit --all --verbose

	# Create branch
	cb = checkout -b

	# Switch to branch
	co = checkout

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -n -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --no-edit

	# Amend the last commits message
	typo = commit --amend --verbose

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" --no-edit ; }; f"

	# Uncredit
	uncredit = commit --amend --reset-author --no-edit

	# Retry last commit rejected by commit-msg hook
	retry = ! git commit --no-status --edit --file "$(git rev-parse --git-path COMMIT_EDITMSG)"

	# Push
	ps = push

	# Pull
	pl = pull

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Rebase continue
	rbc = rebase --continue

	# Rebase "on"
	ro = "!f() { git rebase -i \"$(git merge-base --fork-point \"$1\")\"; }; f"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# List branches sorted by last modified
	b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

	# List local branches that have no upstream
	bl = "!git branch --format '%(refname:short) %(upstream:short)' | awk '{if (!$2) print $1;}'"

	# Remove branches that have already been merged
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the `main` branch
	mpr = "!f() { \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git rebase main pr/$1 && \
			git checkout main && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

	# Diff using latexdiff
	difftex = difftool -y -t latex

	# List number of changesets
	cs = !"changeset"

	# Serve the repo I am in
	serve = daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths .git/

	# List available commands and aliases
	commands = "!f() { git help -a | grep '^  [a-z]' | tr ' ' '\n' | grep -v '^$'; git la; } ; f"

	# List available aliases
	aliases = "!git config -l | grep '^alias\\.' | cut -d'=' -f1 | cut -d'.' -f2"

	# From http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples
	# Show the history of a file with diffs
	fl = log -u
	# Show a diff of the last commit
	dl = diff --staged HEAD^
	# Show modified files in last commit
	dlf = lf -1
	# Diff last commit of given revision
	dr  = "!f() { git diff "$1"^.."$1"; }; f"
	# List changed files in last commit of given revision
	drf  = "!f() { git lf "$1"^.."$1"; }; f"
	# Show the last tag
	lt = describe --tags --abbrev=0

	# stash push only if there is something to push
	condstashpush = "!f() { if git status --porcelain | grep -vq '^??' ; then git stash push ; else true ; fi ; } ; f"

	# stash pop only if there is something to pop
	condstashpop = "!f() { if git stash list | grep -q '' ; then git stash pop; else true ; fi ; } ; f"

	# stash push, pull, push, stash pop
	sync = "!f() { git condstashpush && { if git pull && git push ; then git condstashpop ; else git condstashpop && false ; fi ; } ; } ; f"

	# stash push, pull, stash pop
	catchup = "!f() { git condstashpush && { if git pull ; then git condstashpop ; else git condstashpop && false ; fi ; } ; } ; f"

[difftool.latex]
	cmd = latexdiff-git "$LOCAL" "$REMOTE"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Configure git to use diff-so-fancy for all diff output
	pager = diff-so-fancy | less --tabs=4 -RFX

[init]

	defaultBranch = main

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow
	frag = magenta bold
	old = red bold
	new = green bold
	commit = yellow bold
	whitespace = red reverse

[color "diff-highlight"]

	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[pull]

	# Rebase instead of merge
	rebase = 1

[push]

	# New git installation default
	default = simple

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[rebase]

	instructionFormat = "%s (%ah, %ch) <%an, %cn>"

# URL shorthands

[url "git@github.com:"]

	insteadOf = "pgh:"
	insteadOf = "pgithub:"
	pushInsteadOf = "gh:"
	pushInsteadOf = "github:"

[url "https://github.com/"]

	insteadOf = "gh:"
	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "pgst:"
	insteadOf = "pgist:"
	pushInsteadOf = "gst:"
	pushInsteadOf = "gist:"

[url "https://gist.github.com/"]

	insteadOf = "gst:"
	insteadOf = "gist:"

# use of bitbucket with private repositories only

[url "git@bitbucket.org:"]

	insteadOf = "bb:"
	insteadOf = "bitbucket:"

[user]

	name = make-github-pseudonymous-again
	email = 5165674+make-github-pseudonymous-again@users.noreply.github.com
	signingkey = 7295D6B8B782BC9D!

[credential]

	helper = /usr/lib/git-core/git-credential-libsecret

[commit]

	gpgsign = true
